"""
Итератор — это объект, который позволяет обойти все элементы коллекции
(список, кортеж, словарь и т.д.).Итераторы создаются с помощью двух
методов: __iter__() и __next__().
В этом примере MyNumbers — это класс, который реализует протокол итератора.
В методе __iter__() устанавливается начальное значение для a, а __next__()
возвращает следующее значение при каждом вызове.
"""


"""
Генераторы в Python — это более простой способ создания итераторов.
Генератор — это специальная функция, которая возвращает итератор.
Вместо использования __iter__() и __next__(), в генераторах используется ключевое слово yield.
"""

#-----------------------------------------------------------------------------------------------------

"""
                    ИТЕРАТОР
Создайте итерируемый объект, возвращающий генератор
тридцати пяти чисел трибоначчи и выведите эти числа.

Ваиант 1
"""
print("\tВывод при помощи Итератора: \n")

limit = (int(input("Введите количество чисел последовательности Ваиант #1:")))
num = [0, 1, 1]

for i in range(limit):
    next_num = num[-1] + num[-2] + num[-3]
    num.append(next_num)

print(num)


"""
Ваиант 2
"""
class Iterator:
    def __init__(self, size):
        self.a, self.x = 0, 0
        self.b, self.c = 1, 1
        self.size = size

    def __iter__(self):
        return self

    def __next__(self):
        if self.x < self.size:
            self.x += 1
            result = self.a
            self.a, self.b, self.c = self.b, self.c, (self.a + self.b + self.c)
            return result
        else:
            raise StopIteration


# главная программа с заголовком,
# позволяющим использовать этот файл как модуль:
if __name__ == '__main__':
    # создание итерируемого объекта
    my_iter = Iterator(int(input("Введите количество чисел последовательности Ваиант #2:")))
    # проход по итерируемому объекту с помощью цикла
    for num in my_iter:
        # вывод текущего элемента (который возвращает итератор)
        print(num, end=" ")

#----------------------------------------------------------------------------------------------------
"""
                ГЕНЕРАТОР
Создайте итерируемый объект, возвращающий генератор 
тридцати пяти чисел трибоначчи и выведите эти числа.

"""
print("\tВывод при помощи Генератора: \n")

def trib_numbers(size):
    a, b, c = 0, 1, 1
    for i in range(size):
        yield a
        a, b, c = b, c, a +b + c

print(list(trib_numbers(35)))


